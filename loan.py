# Import th∆∞ vi·ªán, c·∫•u tr√∫c d·ªØ li·ªáu, c√°c gi·∫£i thu·∫≠t
from data_structures import BSTree, yes_no
from database import create_connection
from datetime import datetime, timedelta
from main import connect
import csv

# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
connected, conn, cursor = connect()

# H√†m g·ªçi l·∫°i c√°c ch·ª©c nƒÉng qu·∫£n l√Ω m∆∞·ª£n-tr·∫£
def call_loan_management():
    from menu import loan_management
    loan_management()

# H√†m ƒë·ªãnh d·∫°ng ki·ªÉu d·ªØ li·ªáu th·ªùi gian
def format_datetime(dt):
    return dt.strftime("%Y-%m-%d %H:%M:%S") if isinstance(dt, datetime) else ""

# Khai b√°o ƒë·ªëi t∆∞·ª£ng LoanRecord (phi·∫øu m∆∞·ª£n/tr·∫£ s√°ch)
class LoanRecord:
    def __init__(self, loan_id, reader_id, isbn, borrow_date, due_date, return_date=None, status="ƒêang m∆∞·ª£n"):
        self.loan_id = loan_id
        self.reader_id = reader_id
        self.isbn = isbn
        self.borrow_date = borrow_date if isinstance(borrow_date, datetime) else datetime.strptime(borrow_date, "%Y-%m-%d %H:%M:%S.%f")
        self.due_date = due_date if isinstance(due_date, datetime) else datetime.strptime(due_date, "%Y-%m-%d %H:%M:%S.%f")
        self.return_date = return_date if isinstance(return_date, datetime) else (datetime.strptime(return_date, "%Y-%m-%d %H:%M:%S.%f") if return_date else None)
        self.status = status

    # H√†m ƒë·ªãnh d·∫°ng bi·ªÉu di·ªÖn ƒë·ªëi t∆∞·ª£ng LoanRecord
    def __str__(self):
        return (f"[Loan ID: {self.loan_id}] Reader: {self.reader_id}, ISBN: {self.isbn}, "
                f"Borrowed: {self.borrow_date.date()}, Due: {self.due_date.date()}, "
                f"Returned: {self.return_date.date() if self.return_date else 'N/A'}, Status: {self.status}")

# Khai b√°o ƒë·ªïi t∆∞·ª£ng LoanManager (c·∫≠u ghi h·ªô t)
class LoanManager:
    def __init__(self, conn):
        self.conn = conn
        self.cursor = conn.cursor()
        self.tree = BSTree()
        self.book_cache = {}     # isbn -> available_quantity
        self.reader_cache = set()  # reader_id set
        self.load_all_data()

    # H√†m x·ª≠ l√Ω load d·ªØ li·ªáu t·ª´ b·∫£ng books, readers, loans t·ª´ database v√†o b·ªô nh·ªõ RAM
    def load_all_data(self):
        self.reader_cache.clear()
        self.book_cache.clear()
        self.tree.clear()
        self.cursor.execute("SELECT * FROM readers")
        for reader_id, _ in self.cursor.fetchall(): 
            self.reader_cache.add(reader_id)
        self.cursor.execute("SELECT isbn, available_quantity FROM books")
        for isbn, qty in self.cursor.fetchall():
            self.book_cache[isbn] = qty
        self.cursor.execute("SELECT * FROM loans")
        for row in self.cursor.fetchall():
            loan = LoanRecord(*row)
            self.tree.insert(loan.loan_id, loan)

    # H√†m c·∫≠p nh·∫≠t loan_id t·ª± ƒë·ªông, m·ªói l·∫ßn t·∫°o th√¨ loan_id + 1
    def get_next_id(self):
        max_id = 0
        for loan in self.tree.inorder():
            if loan.loan_id > max_id:
                max_id = loan.loan_id
        return max_id + 1

    # H√†m t·∫°o phi·∫øu m∆∞·ª£n
    def create_loan(self):
        reader_id = input("‚úçÔ∏è Nh·∫≠p m√£ b·∫°n ƒë·ªçc: ").strip()
        isbn = input("‚úçÔ∏è Nh·∫≠p m√£ ISBN s√°ch: ").strip()
        duedays = int(input("‚úçÔ∏è Nh·∫≠p s·ªë ng√†y m∆∞·ª£n: ").strip() or 30)
        from test_condition import can_borrow
        if not can_borrow(self,reader_id, isbn): # Ki·ªÉm tra ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi t·∫°o phi·∫øu m∆∞·ª£n
            if not yes_no():
                call_loan_management()
            else:
                self.create_loan()
            return
        loan_id = self.get_next_id()
        borrow_date = datetime.now()
        due_date = borrow_date + timedelta(days=duedays)
        record = LoanRecord(loan_id, reader_id, isbn, borrow_date, due_date)
        self.tree.insert(loan_id, record)        # Th√™m d·ªØ li·ªáu phi·∫øu m∆∞·ª£n v√†o c√¢y
        self.book_cache[isbn] -= 1          
        self.cursor.execute("""
            INSERT INTO loans (loan_id, reader_id, isbn, borrow_date, due_date, status)
            VALUES (?, ?, ?, ?, ?, ?)""",
            (loan_id, reader_id, isbn, borrow_date.strftime("%Y-%m-%d %H:%M:%S.%f"), due_date.strftime("%Y-%m-%d %H:%M:%S.%f"), "ƒêang m∆∞·ª£n"))
        self.cursor.execute("UPDATE books SET available_quantity = available_quantity - 1, borrowed_quantity = borrowed_quantity + 1 WHERE isbn = ?", (isbn,))
        self.conn.commit()
        print("‚úÖ T·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng.")
        if not yes_no():
            call_loan_management()
        else:
            self.create_loan()
        return True
    # H√†m tr·∫£ s√°ch
    def return_book(self):
        loan_id = int(input("‚úçÔ∏è Nh·∫≠p ID phi·∫øu m∆∞·ª£n: ").strip())
        record = self.tree.search(loan_id)
        if not record or record.status != "ƒêang m∆∞·ª£n":
            print("‚ùå Kh√¥ng t√¨m th·∫•y phi·∫øu ho·∫∑c s√°ch ƒë√£ ƒë∆∞·ª£c tr·∫£.")
        else:
            record.status = "ƒê√£ tr·∫£"
            record.return_date = datetime.now()
            self.book_cache[record.isbn] += 1
            self.cursor.execute("""
            UPDATE loans SET return_date=?, status=? WHERE loan_id=?
        """, (record.return_date.strftime("%Y-%m-%d %H:%M:%S.%f"), "ƒê√£ tr·∫£", loan_id))
            self.cursor.execute("UPDATE books SET available_quantity = available_quantity + 1 , borrowed_quantity = borrowed_quantity -1 WHERE isbn = ?", (record.isbn,))
            self.conn.commit()
            print("‚úÖ Tr·∫£ s√°ch th√†nh c√¥ng.")
        if not yes_no():
            call_loan_management()
        else:
            self.return_book()
    # H√†m x√≥a phi·∫øu m∆∞·ª£n
    def delete_loan(self):
        loan_id = int(input("‚úçÔ∏è Nh·∫≠p ID phi·∫øu m∆∞·ª£n: ").strip())
        record = self.tree.search(loan_id)
        if not record or record.status == "ƒêang m∆∞·ª£n":
            print("‚ùå Kh√¥ng th·ªÉ xo√° phi·∫øu ch∆∞a tr·∫£.")
        else:
            self.tree.delete(loan_id)
            self.cursor.execute("DELETE FROM loans WHERE loan_id=?", (loan_id,))
            self.conn.commit()
            print("‚úÖ Xo√° phi·∫øu th√†nh c√¥ng.")
        if not yes_no():
            call_loan_management()
        else:
            self.delete_loan()
    # H√†m in danh s√°ch phi·∫øu m∆∞·ª£n
    def view_loans(self):
        for loan in self.tree.inorder():
            print(loan)
        call_loan_management()

    # H√†m l·ªçc d·ªØ li·ªáu phi·∫øu m∆∞·ª£n theo b·∫°n ƒë·ªçc
    def filter_by_reader(self):
        reader_id = input("‚úçÔ∏è Nh·∫≠p m√£ b·∫°n ƒë·ªçc: ").strip()
        print(f"L·ªãch s·ª≠ m∆∞·ª£n c·ªßa b·∫°n ƒë·ªçc {reader_id}:")
        for loan in self.tree.inorder():
            if loan.reader_id == reader_id:
                print(loan)
        if not yes_no():
            call_loan_management()
        else:
            self.filter_by_reader()
    # H√†m l·ªçc d·ªØ li·ªáu phi·∫øu m∆∞·ª£n theo s√°ch
    def filter_by_isbn(self):
        isbn = input("‚úçÔ∏è Nh·∫≠p m√£ ISBN s√°ch: ").strip()
        print(f"L·ªãch s·ª≠ m∆∞·ª£n c·ªßa s√°ch ISBN {isbn}:")
        for loan in self.tree.inorder():
            if loan.isbn == isbn:
                print(loan)
        if not yes_no():
            call_loan_management()
        else:
            self.filter_by_isbn()
    # H√†m in ra danh s√°ch s√°ch qu√° h·∫°n
    def view_overdue(self):
        print("Danh s√°ch s√°ch qu√° h·∫°n:")
        today = datetime.now()
        for loan in self.tree.inorder():
            if loan.status == "ƒêang m∆∞·ª£n" and loan.due_date < today:
                print(loan)
        call_loan_management()

# H√†m ch·ªçn ch·ª©c nƒÉng qu·∫£n l√Ω m∆∞·ª£n tr·∫£
def loan_choice():
    manager = LoanManager(conn)
    ch = input("üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1 - 9): ").strip()
    while True:
        if ch == "1":
            manager.create_loan()
        elif ch == "2":
            manager.return_book()
        elif ch == "3":
            manager.delete_loan()
        elif ch == "4":
            manager.view_loans()
        elif ch == "5":
            manager.filter_by_reader()
        elif ch == "6":
            manager.filter_by_isbn()
        elif ch == "7":
            manager.view_overdue()
        elif ch == "8":
            export_to_csv(manager)
        elif ch == "9":
            print("üè† Tr·ªü v·ªÅ menu ch√≠nh.")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. H√£y th·ª≠ l·∫°i.")
            ch = input("üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1 - 9): ").strip()
            continue
        break
    return

# H√†m xu·∫•t d·ªØ li·ªáu m∆∞·ª£n tr·∫£ sang file csvcsv
def export_to_csv(self):
    with open("loan_export.csv", "w", newline="", encoding="utf-8-sig") as f:
        writer = csv.writer(f)
        writer.writerow(["Loan ID",  "Reader", "ISBN","Borrowed","Due date","Returned","Status"])
        for loan in self.tree.inorder():
            writer.writerow([loan.loan_id, loan.reader_id, loan.isbn, format_datetime(loan.borrow_date), format_datetime(loan.due_date), format_datetime(loan.return_date), loan.status])
    print("‚úÖ Xu·∫•t CSV", "ƒê√£ l∆∞u file loan_export.csv")
    call_loan_management()
